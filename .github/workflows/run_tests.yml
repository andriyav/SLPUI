name: Run Selenium Tests

on:
  push:
    branches:
      - dev_reporting
  pull_request:

jobs:
  selenium-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt install -y ./google-chrome-stable_current_amd64.deb  

    - name: Install Xvfb
      run: sudo apt-get install -y xvfb

    - name: Extract Chrome Cache
      run: |
        mkdir -p ./tests/cache
        tar -xzf /home/runner/work/SLPUI/SLPUI/tests/chrome_cache.tar.gz -C ./tests/cache

    - name: List Repository Files
      run: |
        echo "Listing files in repository..."
        ls -R
        echo "Current Directory: $(pwd)"

    # Download Previous Allure Results
    - name: Download Previous Allure Results
      uses: actions/download-artifact@v3
      with:
        name: allure-results
        path: previous-allure-results

    - name: Run Tests with Virtual Display
      run: |
        mkdir -p allure-results
        xvfb-run -a pytest --log-cli-level=INFO --alluredir=allure-results tests/test_checklist.py | stdbuf -oL tee allure-results/stdout.log

      continue-on-error: true  # Continue even if tests fail

    # Merge Previous and Current Results
    - name: Merge Allure Results
      run: |
        mkdir -p merged-results
        cp -r previous-allure-results/* allure-results/ || true
        mv allure-results/* merged-results/

    # Upload Chrome Cache Artifact
    - name: Upload Chrome Cache Artifact
      if: always()  # Ensure this runs even if tests fail
      uses: actions/upload-artifact@v3
      with:
        name: chrome-cache
        path: chrome_cache.tar.gz

    - name: Upload Screenshots
      if: always()  # Ensure this runs even if tests fail
      uses: actions/upload-artifact@v3
      with:
        name: screenshots
        path: artifacts/screenshots  # Ensure this matches the actual folder path

    - name: Upload HTML Artifact
      if: always()  # Ensure this runs even if tests fail
      uses: actions/upload-artifact@v3
      with:
        name: page-source
        path: page_source.html  # Ensure this matches the actual file path

    # Generate Allure Report
    - name: Generate Allure Report
      if: always()  # Ensure this runs even if tests fail
      run: |
        npm install -g allure-commandline@latest
        allure generate merged-results -o allure-report

    # Upload Merged Allure Results for Next Run
    - name: Upload Merged Allure Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: allure-results
        path: merged-results

    # Deploy Allure Report to GitHub Pages
    - name: Deploy Allure Report
      if: always()  # Ensure this runs even if tests fail
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GH_TOKEN }}  # Ensure the token is in your GitHub secrets
        publish_dir: allure-report
