"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"list_address.state_prov returns 2-letter State code [with source='741']","6339","test_state_prov_0_741","tests","Thu Feb 06 13:52:11 UTC 2025","passed","Thu Feb 06 13:52:17 UTC 2025","TestPromotionChecklist","test_checklist","",""
"co_list_agent_office_phone are mapped with [with source='316']
FirstValueProvider:(""agent_office_phone"",""office_phone"")"" ","11480","test_co_list_agent_office_phone_1_316","tests","Thu Feb 06 13:36:16 UTC 2025","passed","Thu Feb 06 13:36:28 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_agent_preferred_phone are mapped with FirstValueProvider:(""agent_mobile_phone"",""agent_home_phone"") [with source='316']","13034","test_list_agent_preferred_phone_1_316","tests","Thu Feb 06 13:47:10 UTC 2025","passed","Thu Feb 06 13:47:23 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Price_history must use PriceHistoryEnhancer with ListPrice input [with source='741']","58967","test_price_history_0_741","tests","Thu Feb 06 13:49:47 UTC 2025","passed","Thu Feb 06 13:50:46 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2208","test_list_address_nullifier_const","tests","Thu Feb 06 13:42:44 UTC 2025","passed","Thu Feb 06 13:42:46 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Kww_region has no mapping [with source='741']","58806","test_kww_region_0_741","tests","Thu Feb 06 13:39:06 UTC 2025","passed","Thu Feb 06 13:40:05 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","3267","test_mls_id_sa_id","tests","Thu Feb 06 13:48:36 UTC 2025","passed","Thu Feb 06 13:48:39 UTC 2025","TestPromotionChecklist","test_checklist","",""
"raw.properties.list_status is mapped [with source='741']","54778","test_raw_properties_list_status_0_741","tests","Thu Feb 06 13:51:01 UTC 2025","passed","Thu Feb 06 13:51:56 UTC 2025","TestPromotionChecklist","test_checklist","",""
"All available elements of list_address.properties.address are included [with source='741']","58868","test_list_address_0_741","tests","Thu Feb 06 13:40:19 UTC 2025","failed","Thu Feb 06 13:41:18 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","6060","test_co_list_agent_office_phone","tests","Thu Feb 06 13:35:13 UTC 2025","passed","Thu Feb 06 13:35:19 UTC 2025","TestPromotionChecklist","test_checklist","",""
"co_list_agent_preferred_phone are mapped with [with source='316']
FirstValueProvider:(""agent_mobile_phone"",""agent_home_phone""","13017","test_co_list_agent_preferred_phone_1_316","tests","Thu Feb 06 13:37:28 UTC 2025","passed","Thu Feb 06 13:37:41 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Currency_code must be UPPER [with source='316']","12561","test_currency_code_1_316","tests","Thu Feb 06 13:38:37 UTC 2025","passed","Thu Feb 06 13:38:49 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2331","test_raw_properties_list_status","tests","Thu Feb 06 13:50:59 UTC 2025","passed","Thu Feb 06 13:51:01 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2218","test_kww_region","tests","Thu Feb 06 13:39:04 UTC 2025","passed","Thu Feb 06 13:39:06 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2250","test_list_address_properties_country","tests","Thu Feb 06 13:43:53 UTC 2025","passed","Thu Feb 06 13:43:55 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2214","test_price_history","tests","Thu Feb 06 13:49:45 UTC 2025","passed","Thu Feb 06 13:49:47 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2351","test_list_address","tests","Thu Feb 06 13:40:17 UTC 2025","passed","Thu Feb 06 13:40:19 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_address.country is SetConstant to country code (US or CA) [with source='741']","55339","test_list_address_properties_country_0_741","tests","Thu Feb 06 13:43:55 UTC 2025","passed","Thu Feb 06 13:44:51 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Currency_code must be UPPER [with source='741']","53545","test_currency_code_0_741","tests","Thu Feb 06 13:37:43 UTC 2025","passed","Thu Feb 06 13:38:37 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2366","test_list_address_coordinates","tests","Thu Feb 06 13:41:31 UTC 2025","passed","Thu Feb 06 13:41:33 UTC 2025","TestPromotionChecklist","test_checklist","",""
"raw.properties.list_status is mapped [with source='316']","12660","test_raw_properties_list_status_1_316","tests","Thu Feb 06 13:51:56 UTC 2025","passed","Thu Feb 06 13:52:09 UTC 2025","TestPromotionChecklist","test_checklist","",""
"All available elements of list_address.properties.address are included [with source='316']","12672","test_list_address_1_316","tests","Thu Feb 06 13:41:18 UTC 2025","failed","Thu Feb 06 13:41:31 UTC 2025","TestPromotionChecklist","test_checklist","",""
"No elements of list_address are nullified or set constant (except country) [with source='741']","54933","test_list_address_nullifier_const_0_741","tests","Thu Feb 06 13:42:46 UTC 2025","passed","Thu Feb 06 13:43:41 UTC 2025","TestPromotionChecklist","test_checklist","",""
"List_address.coordinates should utilize Latitude and Longitude [with source='316']","13355","test_list_address_coordinates_1_316","tests","Thu Feb 06 13:42:31 UTC 2025","passed","Thu Feb 06 13:42:44 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_agent_office_phone are mapped with [with source='316']
`   FirstValueProvider:(""agent_office_phone"",""office_phone"")"" ","11424","test_list_agent_office_phone_1_316","tests","Thu Feb 06 13:46:03 UTC 2025","passed","Thu Feb 06 13:46:14 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_dt is mapped [with source='741']","57936","test_list_dt_0_741","tests","Thu Feb 06 13:47:26 UTC 2025","passed","Thu Feb 06 13:48:23 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Validate mls_id is the correct value [with source='316']","5943","test_dashboard_source_number_1_316","tests","Thu Feb 06 13:38:58 UTC 2025","passed","Thu Feb 06 13:39:04 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_address.country is SetConstant to country code (US or CA) [with source='316']","11830","test_list_address_properties_country_1_316","tests","Thu Feb 06 13:44:51 UTC 2025","passed","Thu Feb 06 13:45:02 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='741']","53627","test_mls_id_sa_id_0_741","tests","Thu Feb 06 13:48:39 UTC 2025","passed","Thu Feb 06 13:49:33 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_address.state_prov returns 2-letter State code [with source='316']","6598","test_state_prov_1_316","tests","Thu Feb 06 13:52:17 UTC 2025","passed","Thu Feb 06 13:52:24 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2245","test_list_agent_office_phone","tests","Thu Feb 06 13:45:02 UTC 2025","passed","Thu Feb 06 13:45:05 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_agent_office_phone are mapped with [with source='741']
`   FirstValueProvider:(""agent_office_phone"",""office_phone"")"" ","58207","test_list_agent_office_phone_0_741","tests","Thu Feb 06 13:45:05 UTC 2025","passed","Thu Feb 06 13:46:03 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Validate mls_id is the correct value [with source='741']","6667","test_dashboard_source_number_0_741","tests","Thu Feb 06 13:38:51 UTC 2025","passed","Thu Feb 06 13:38:58 UTC 2025","TestPromotionChecklist","test_checklist","",""
"No elements of list_address are nullified or set constant (except country) [with source='316']","11602","test_list_address_nullifier_const_1_316","tests","Thu Feb 06 13:43:41 UTC 2025","passed","Thu Feb 06 13:43:53 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2282","test_dashboard_source_number","tests","Thu Feb 06 13:38:49 UTC 2025","passed","Thu Feb 06 13:38:51 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2250","test_list_agent_preferred_phone","tests","Thu Feb 06 13:46:14 UTC 2025","passed","Thu Feb 06 13:46:16 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_dt is mapped [with source='316']","12633","test_list_dt_1_316","tests","Thu Feb 06 13:48:23 UTC 2025","passed","Thu Feb 06 13:48:36 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2222","test_currency_code","tests","Thu Feb 06 13:37:41 UTC 2025","passed","Thu Feb 06 13:37:43 UTC 2025","TestPromotionChecklist","test_checklist","",""
"List_address.coordinates should utilize Latitude and Longitude [with source='741']","57782","test_list_address_coordinates_0_741","tests","Thu Feb 06 13:41:33 UTC 2025","passed","Thu Feb 06 13:42:31 UTC 2025","TestPromotionChecklist","test_checklist","",""
"co_list_agent_preferred_phone are mapped with [with source='741']
FirstValueProvider:(""agent_mobile_phone"",""agent_home_phone""","57775","test_co_list_agent_preferred_phone_0_741","tests","Thu Feb 06 13:36:30 UTC 2025","passed","Thu Feb 06 13:37:28 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2263","test_co_list_agent_preferred_phone","tests","Thu Feb 06 13:36:28 UTC 2025","passed","Thu Feb 06 13:36:30 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Price_history must use PriceHistoryEnhancer with ListPrice input [with source='316']","12907","test_price_history_1_316","tests","Thu Feb 06 13:50:46 UTC 2025","passed","Thu Feb 06 13:50:59 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='316']","11880","test_mls_id_sa_id_1_316","tests","Thu Feb 06 13:49:33 UTC 2025","passed","Thu Feb 06 13:49:45 UTC 2025","TestPromotionChecklist","test_checklist","",""
"Kww_region has no mapping [with source='316']","11739","test_kww_region_1_316","tests","Thu Feb 06 13:40:05 UTC 2025","passed","Thu Feb 06 13:40:17 UTC 2025","TestPromotionChecklist","test_checklist","",""
"list_agent_preferred_phone are mapped with FirstValueProvider:(""agent_mobile_phone"",""agent_home_phone"") [with source='741']","53680","test_list_agent_preferred_phone_0_741","tests","Thu Feb 06 13:46:16 UTC 2025","passed","Thu Feb 06 13:47:10 UTC 2025","TestPromotionChecklist","test_checklist","",""
"co_list_agent_office_phone are mapped with [with source='741']
FirstValueProvider:(""agent_office_phone"",""office_phone"")"" ","57522","test_co_list_agent_office_phone_0_741","tests","Thu Feb 06 13:35:19 UTC 2025","passed","Thu Feb 06 13:36:16 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2275","test_state_prov","tests","Thu Feb 06 13:52:09 UTC 2025","passed","Thu Feb 06 13:52:11 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2321","test_list_dt","tests","Thu Feb 06 13:47:23 UTC 2025","passed","Thu Feb 06 13:47:26 UTC 2025","TestPromotionChecklist","test_checklist","",""
