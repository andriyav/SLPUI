"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1389","test_list_agent_preferred_phone","tests","Sat Feb 15 19:10:48 UTC 2025","passed","Sat Feb 15 19:10:49 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","2470","test_list_address","tests","Sat Feb 15 19:06:06 UTC 2025","passed","Sat Feb 15 19:06:09 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54368","test_currency_code_0_741","tests","Sat Feb 15 19:04:08 UTC 2025","passed","Sat Feb 15 19:05:03 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54457","test_not_nullify_0_741","tests","Sat Feb 15 19:13:37 UTC 2025","passed","Sat Feb 15 19:14:31 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1493","test_state_prov","tests","Sat Feb 15 19:17:19 UTC 2025","passed","Sat Feb 15 19:17:20 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","55193","test_list_agent_office_phone_0_741","tests","Sat Feb 15 19:09:53 UTC 2025","passed","Sat Feb 15 19:10:48 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54977","test_list_agent_preferred_phone_0_741","tests","Sat Feb 15 19:10:49 UTC 2025","passed","Sat Feb 15 19:11:44 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1530","test_schools_items","tests","Sat Feb 15 19:16:23 UTC 2025","passed","Sat Feb 15 19:16:25 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1384","test_mls_id_sa_id","tests","Sat Feb 15 19:12:41 UTC 2025","passed","Sat Feb 15 19:12:42 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54293","test_raw_properties_list_status_0_741","tests","Sat Feb 15 19:15:29 UTC 2025","passed","Sat Feb 15 19:16:23 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1516","test_list_address_nullifier_const","tests","Sat Feb 15 19:07:59 UTC 2025","passed","Sat Feb 15 19:08:01 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","5876","test_dashboard_source_number_0_741","tests","Sat Feb 15 19:05:04 UTC 2025","passed","Sat Feb 15 19:05:10 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1504","test_list_address_properties_country","tests","Sat Feb 15 19:08:56 UTC 2025","passed","Sat Feb 15 19:08:57 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1534","test_not_nullify","tests","Sat Feb 15 19:13:35 UTC 2025","passed","Sat Feb 15 19:13:37 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54085","test_list_address_properties_country_0_741","tests","Sat Feb 15 19:08:57 UTC 2025","passed","Sat Feb 15 19:09:51 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","4536","test_co_list_agent_office_phone","tests","Sat Feb 15 19:02:13 UTC 2025","passed","Sat Feb 15 19:02:18 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54213","test_co_list_agent_office_phone_0_741","tests","Sat Feb 15 19:02:18 UTC 2025","passed","Sat Feb 15 19:03:12 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54966","test_kww_region_0_741","tests","Sat Feb 15 19:05:11 UTC 2025","passed","Sat Feb 15 19:06:06 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1667","test_price_history","tests","Sat Feb 15 19:14:31 UTC 2025","passed","Sat Feb 15 19:14:33 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","53167","test_mls_id_sa_id_0_741","tests","Sat Feb 15 19:12:42 UTC 2025","passed","Sat Feb 15 19:13:35 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1493","test_list_agent_office_phone","tests","Sat Feb 15 19:09:51 UTC 2025","passed","Sat Feb 15 19:09:53 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1493","test_dashboard_source_number","tests","Sat Feb 15 19:05:03 UTC 2025","passed","Sat Feb 15 19:05:04 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","53799","test_schools_items_0_741","tests","Sat Feb 15 19:16:25 UTC 2025","passed","Sat Feb 15 19:17:19 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1696","test_list_dt","tests","Sat Feb 15 19:11:44 UTC 2025","passed","Sat Feb 15 19:11:46 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54501","test_list_address_coordinates_0_741","tests","Sat Feb 15 19:07:05 UTC 2025","passed","Sat Feb 15 19:07:59 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1477","test_year_built","tests","Sat Feb 15 19:17:26 UTC 2025","passed","Sat Feb 15 19:17:28 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54248","test_list_address_0_741","tests","Sat Feb 15 19:06:09 UTC 2025","failed","Sat Feb 15 19:07:03 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","6139","test_state_prov_0_741","tests","Sat Feb 15 19:17:20 UTC 2025","passed","Sat Feb 15 19:17:26 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54838","test_list_address_nullifier_const_0_741","tests","Sat Feb 15 19:08:01 UTC 2025","passed","Sat Feb 15 19:08:56 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","53297","test_co_list_agent_preferred_phone_0_741","tests","Sat Feb 15 19:03:13 UTC 2025","passed","Sat Feb 15 19:04:07 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1484","test_currency_code","tests","Sat Feb 15 19:04:07 UTC 2025","passed","Sat Feb 15 19:04:08 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1566","test_raw_properties_list_status","tests","Sat Feb 15 19:15:28 UTC 2025","passed","Sat Feb 15 19:15:29 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1407","test_co_list_agent_preferred_phone","tests","Sat Feb 15 19:03:12 UTC 2025","passed","Sat Feb 15 19:03:13 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54795","test_list_dt_0_741","tests","Sat Feb 15 19:11:46 UTC 2025","passed","Sat Feb 15 19:12:41 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1419","test_kww_region","tests","Sat Feb 15 19:05:10 UTC 2025","passed","Sat Feb 15 19:05:11 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54565","test_year_built_0_741","tests","Sat Feb 15 19:17:28 UTC 2025","passed","Sat Feb 15 19:18:22 UTC 2025","TestPromotionChecklist","test_checklist","",""
"","54660","test_price_history_0_741","tests","Sat Feb 15 19:14:33 UTC 2025","passed","Sat Feb 15 19:15:28 UTC 2025","TestPromotionChecklist","test_checklist","",""
"A decorator for applying a mark on test functions and classes.

``MarkDecorators`` are created with ``pytest.mark``::

    mark1 = pytest.mark.NAME  # Simple MarkDecorator
    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

and can then be applied as decorators to test functions::

    @mark2
    def test_function():
        pass

When a ``MarkDecorator`` is called, it does the following:

1. If called with a single class as its only positional argument and no
   additional keyword arguments, it attaches the mark to the class so it
   gets applied automatically to all test cases found in that class.

2. If called with a single function as its only positional argument and
   no additional keyword arguments, it attaches the mark to the function,
   containing all the arguments already stored internally in the
   ``MarkDecorator``.

3. When called in any other case, it returns a new ``MarkDecorator``
   instance with the original ``MarkDecorator``'s content updated with
   the arguments passed to this call.

Note: The rules above prevent a ``MarkDecorator`` from storing only a
single function or class reference as its positional argument with no
additional keyword or positional arguments. You can work around this by
using `with_args()`.
","1669","test_list_address_coordinates","tests","Sat Feb 15 19:07:03 UTC 2025","passed","Sat Feb 15 19:07:05 UTC 2025","TestPromotionChecklist","test_checklist","",""
