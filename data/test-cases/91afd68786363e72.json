{"uid":"91afd68786363e72","name":"test_currency_code_10_71","fullName":"tests.test_checklist.TestPromotionChecklist#test_currency_code_10_71","historyId":"978bb61cff817d7f27a8eabaf9535d06","time":{"start":1739174815486,"stop":1739174828251,"duration":12765},"status":"broken","statusMessage":"UnboundLocalError: cannot access local variable 'is_upper' where it is not associated with a value","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_currency_code_10_71>\nsource = '71'\n\n    @allure.testcase('Currency_code must be UPPER')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_currency_code(self, source):\n        title = 'Currency_code must be UPPER'\n        PrintAssertions.title_print(title, source)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    field = ListComponent(self.driver).get_txt_get_field('currency_code')\n                    match = re.search(r\"const=([A-Za-z]{3})\", field)\n                    if match:\n                        currency_code = match.group(1)\n                        is_upper = currency_code.isupper()\n>                   self.assertTrue(is_upper, field)\nE                   UnboundLocalError: cannot access local variable 'is_upper' where it is not associated with a value\n\ntests/test_checklist.py:313: UnboundLocalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1739172869486,"stop":1739172869486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"UnboundLocalError: cannot access local variable 'is_upper' where it is not associated with a value","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_currency_code_10_71>\nsource = '71'\n\n    @allure.testcase('Currency_code must be UPPER')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_currency_code(self, source):\n        title = 'Currency_code must be UPPER'\n        PrintAssertions.title_print(title, source)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    field = ListComponent(self.driver).get_txt_get_field('currency_code')\n                    match = re.search(r\"const=([A-Za-z]{3})\", field)\n                    if match:\n                        currency_code = match.group(1)\n                        is_upper = currency_code.isupper()\n>                   self.assertTrue(is_upper, field)\nE                   UnboundLocalError: cannot access local variable 'is_upper' where it is not associated with a value\n\ntests/test_checklist.py:313: UnboundLocalError","steps":[],"attachments":[{"uid":"219a91914114ae7a","name":"log","source":"219a91914114ae7a.txt","type":"text/plain","size":360}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1739188252265,"stop":1739188252265,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az1695-635"},{"name":"thread","value":"3338-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"91afd68786363e72.json","parameterValues":[]}