{"uid":"9edd3f9857693dcc","name":"test_mls_id_sa_id_5_674","fullName":"tests.test_checklist.TestPromotionChecklist#test_mls_id_sa_id_5_674","historyId":"2d6230bcc2a4615c24478b4cc777dcad","time":{"start":1736033220159,"stop":1736033231436,"duration":11277},"description":"Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='674']","descriptionHtml":"<p>Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='674']</p>\n","status":"failed","statusMessage":"AssertionError: Lists differ: ['mls[56 chars]_BREA,const_type=str)', 'sa_source_id\\n+\\n[add[59 chars]nt)'] != ['mls[56 chars]_BREA ,const_type=str)', 'sa_source_id\\n+\\n[ad[60 chars]nt)']\n\nFirst differing element 0:\n'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA,const_type=str)'\n'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA ,const_type=str)'\n\n  ['mls_id\\n'\n   '+\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n-  'SetConstant(const=BS_BREA,const_type=str)',\n+  'SetConstant(const=BS_BREA ,const_type=str)',\n?                            +\n\n   'sa_source_id\\n'\n   '+\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n   'SetConstant(const=6025,const_type=int)']","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_5_674>\nsource = '674'\n\n    @allure.testcase('7')\n    @parameterized.expand(sources)\n    def test_mls_id_sa_id(self, source):\n        '''Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)'''\n        print('''Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)''', flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_sa_id()\n                    sa_id = ListComponent(self.driver).get_txt_ist_sa_id()\n                    mls_id = ListComponent(self.driver).get_txt_list_mls_id()\n                    actual = [mls_id, sa_id]\n                    target_list = mls_id_dict.get(source)\n                    mls_id_target = f'mls_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[0]},const_type=str)'\n                    sa_id_target = f'sa_source_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[1]},const_type=int)'\n                    target = [mls_id_target, sa_id_target]\n                    try:\n>                       self.assertEqual(actual, target)\nE                       AssertionError: Lists differ: ['mls[56 chars]_BREA,const_type=str)', 'sa_source_id\\n+\\n[add[59 chars]nt)'] != ['mls[56 chars]_BREA ,const_type=str)', 'sa_source_id\\n+\\n[ad[60 chars]nt)']\nE                       \nE                       First differing element 0:\nE                       'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA,const_type=str)'\nE                       'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA ,const_type=str)'\nE                       \nE                         ['mls_id\\n'\nE                          '+\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                       -  'SetConstant(const=BS_BREA,const_type=str)',\nE                       +  'SetConstant(const=BS_BREA ,const_type=str)',\nE                       ?                            +\nE                       \nE                          'sa_source_id\\n'\nE                          '+\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          'SetConstant(const=6025,const_type=int)']\n\ntests/test_checklist.py:267: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_5_674>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:271: in test_mls_id_sa_id\n    self.assertEqual(actual, target)\nE   AssertionError: Lists differ: ['mls[56 chars]_BREA,const_type=str)', 'sa_source_id\\n+\\n[add[59 chars]nt)'] != ['mls[56 chars]_BREA ,const_type=str)', 'sa_source_id\\n+\\n[ad[60 chars]nt)']\nE   \nE   First differing element 0:\nE   'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA,const_type=str)'\nE   'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA ,const_type=str)'\nE   \nE     ['mls_id\\n'\nE      '+\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE   -  'SetConstant(const=BS_BREA,const_type=str)',\nE   +  'SetConstant(const=BS_BREA ,const_type=str)',\nE   ?                            +\nE   \nE      'sa_source_id\\n'\nE      '+\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      'SetConstant(const=6025,const_type=int)']","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736030911162,"stop":1736030911162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='674']","status":"failed","statusMessage":"AssertionError: Lists differ: ['mls[56 chars]_BREA,const_type=str)', 'sa_source_id\\n+\\n[add[59 chars]nt)'] != ['mls[56 chars]_BREA ,const_type=str)', 'sa_source_id\\n+\\n[ad[60 chars]nt)']\n\nFirst differing element 0:\n'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA,const_type=str)'\n'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA ,const_type=str)'\n\n  ['mls_id\\n'\n   '+\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n-  'SetConstant(const=BS_BREA,const_type=str)',\n+  'SetConstant(const=BS_BREA ,const_type=str)',\n?                            +\n\n   'sa_source_id\\n'\n   '+\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n   '[add]\\n'\n   'SetConstant(const=6025,const_type=int)']","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_5_674>\nsource = '674'\n\n    @allure.testcase('7')\n    @parameterized.expand(sources)\n    def test_mls_id_sa_id(self, source):\n        '''Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)'''\n        print('''Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)''', flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_sa_id()\n                    sa_id = ListComponent(self.driver).get_txt_ist_sa_id()\n                    mls_id = ListComponent(self.driver).get_txt_list_mls_id()\n                    actual = [mls_id, sa_id]\n                    target_list = mls_id_dict.get(source)\n                    mls_id_target = f'mls_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[0]},const_type=str)'\n                    sa_id_target = f'sa_source_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[1]},const_type=int)'\n                    target = [mls_id_target, sa_id_target]\n                    try:\n>                       self.assertEqual(actual, target)\nE                       AssertionError: Lists differ: ['mls[56 chars]_BREA,const_type=str)', 'sa_source_id\\n+\\n[add[59 chars]nt)'] != ['mls[56 chars]_BREA ,const_type=str)', 'sa_source_id\\n+\\n[ad[60 chars]nt)']\nE                       \nE                       First differing element 0:\nE                       'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA,const_type=str)'\nE                       'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA ,const_type=str)'\nE                       \nE                         ['mls_id\\n'\nE                          '+\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                       -  'SetConstant(const=BS_BREA,const_type=str)',\nE                       +  'SetConstant(const=BS_BREA ,const_type=str)',\nE                       ?                            +\nE                       \nE                          'sa_source_id\\n'\nE                          '+\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          '[add]\\n'\nE                          'SetConstant(const=6025,const_type=int)']\n\ntests/test_checklist.py:267: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_5_674>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:271: in test_mls_id_sa_id\n    self.assertEqual(actual, target)\nE   AssertionError: Lists differ: ['mls[56 chars]_BREA,const_type=str)', 'sa_source_id\\n+\\n[add[59 chars]nt)'] != ['mls[56 chars]_BREA ,const_type=str)', 'sa_source_id\\n+\\n[ad[60 chars]nt)']\nE   \nE   First differing element 0:\nE   'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA,const_type=str)'\nE   'mls_[15 chars]add]\\n[add]\\n[add]\\nSetConstant(const=BS_BREA ,const_type=str)'\nE   \nE     ['mls_id\\n'\nE      '+\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE   -  'SetConstant(const=BS_BREA,const_type=str)',\nE   +  'SetConstant(const=BS_BREA ,const_type=str)',\nE   ?                            +\nE   \nE      'sa_source_id\\n'\nE      '+\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      '[add]\\n'\nE      'SetConstant(const=6025,const_type=int)']","steps":[],"attachments":[{"uid":"206c8d4fea13787b","name":"stdout","source":"206c8d4fea13787b.txt","type":"text/plain","size":314}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736033792678,"stop":1736033792679,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az570-511"},{"name":"thread","value":"2814-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9edd3f9857693dcc.json","parameterValues":[]}