{"uid":"6553cacf0a9fea57","name":"test_raw_properties_list_status_12_107","fullName":"tests.test_checklist.TestPromotionChecklist#test_raw_properties_list_status_12_107","historyId":"6a19e7d6599318fbf2c9469232b68a3f","time":{"start":1736432294623,"stop":1736432294821,"duration":198},"description":"raw.properties.list_status is mapped [with source='107']","descriptionHtml":"<p>raw.properties.list_status is mapped [with source='107']</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x557417d248fa <unknown>\n#1 0x557417835d20 <unknown>\n#2 0x55741786d438 <unknown>\n#3 0x557417868f96 <unknown>\n#4 0x5574178b4d86 <unknown>\n#5 0x5574178b43d6 <unknown>\n#6 0x5574178a8893 <unknown>\n#7 0x55741787730d <unknown>\n#8 0x55741787832e <unknown>\n#9 0x557417cf100b <unknown>\n#10 0x557417cf4f97 <unknown>\n#11 0x557417cdd71c <unknown>\n#12 0x557417cf5b17 <unknown>\n#13 0x557417cc26cf <unknown>\n#14 0x557417d136b8 <unknown>\n#15 0x557417d13880 <unknown>\n#16 0x557417d23776 <unknown>\n#17 0x7f6a99a94ac3 <unknown>","statusTrace":"tests/test_runner.py:23: in setUp\n    self._init_driver()\ntests/test_runner.py:37: in _init_driver\n    self.driver = webdriver.Chrome(options=chrome_options)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:329: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7102511f70>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#15 0x557417d13880 \\\\u003Cunknown>\\\\n#16 0x557417d23776 \\\\u003Cunknown>\\\\n#17 0x7f6a99a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x557417d248fa <unknown>\nE       #1 0x557417835d20 <unknown>\nE       #2 0x55741786d438 <unknown>\nE       #3 0x557417868f96 <unknown>\nE       #4 0x5574178b4d86 <unknown>\nE       #5 0x5574178b43d6 <unknown>\nE       #6 0x5574178a8893 <unknown>\nE       #7 0x55741787730d <unknown>\nE       #8 0x55741787832e <unknown>\nE       #9 0x557417cf100b <unknown>\nE       #10 0x557417cf4f97 <unknown>\nE       #11 0x557417cdd71c <unknown>\nE       #12 0x557417cf5b17 <unknown>\nE       #13 0x557417cc26cf <unknown>\nE       #14 0x557417d136b8 <unknown>\nE       #15 0x557417d13880 <unknown>\nE       #16 0x557417d23776 <unknown>\nE       #17 0x7f6a99a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736425743723,"stop":1736425743723,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736432296957,"stop":1736432296957,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az661-754"},{"name":"thread","value":"2902-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"6553cacf0a9fea57.json","parameterValues":[]}