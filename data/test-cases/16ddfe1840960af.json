{"uid":"16ddfe1840960af","name":"test_mls_id_sa_id_12_664","fullName":"tests.test_checklist.TestPromotionChecklist#test_mls_id_sa_id_12_664","historyId":"45ef2caa40f205a29aa216ea7fd00eff","time":{"start":1739131823721,"stop":1739131836945,"duration":13224},"status":"broken","statusMessage":"TypeError: 'NoneType' object is not subscriptable","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_12_664>\nsource = '664'\n\n    @allure.testcase('Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_mls_id_sa_id(self, source):\n        title = 'Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)'\n        PrintAssertions.title_print(title, source)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_sa_id()\n                    sa_id = ListComponent(self.driver).get_txt_ist_sa_id()\n                    mls_id = ListComponent(self.driver).get_txt_list_mls_id()\n                    actual = [mls_id, sa_id]\n                    target_list = mls_id_dict.get(source)\n>                   mls_id_target = f'mls_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[0]},const_type=str)'\nE                   TypeError: 'NoneType' object is not subscriptable\n\ntests/test_checklist.py:261: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1739120535968,"stop":1739120535968,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"TypeError: 'NoneType' object is not subscriptable","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_12_664>\nsource = '664'\n\n    @allure.testcase('Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_mls_id_sa_id(self, source):\n        title = 'Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)'\n        PrintAssertions.title_print(title, source)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_sa_id()\n                    sa_id = ListComponent(self.driver).get_txt_ist_sa_id()\n                    mls_id = ListComponent(self.driver).get_txt_list_mls_id()\n                    actual = [mls_id, sa_id]\n                    target_list = mls_id_dict.get(source)\n>                   mls_id_target = f'mls_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[0]},const_type=str)'\nE                   TypeError: 'NoneType' object is not subscriptable\n\ntests/test_checklist.py:261: TypeError","steps":[],"attachments":[{"uid":"27117df2d28ddce8","name":"log","source":"27117df2d28ddce8.txt","type":"text/plain","size":360}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1739137105585,"stop":1739137105585,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az807-658"},{"name":"thread","value":"3345-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"16ddfe1840960af.json","parameterValues":[]}