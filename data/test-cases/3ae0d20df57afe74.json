{"uid":"3ae0d20df57afe74","name":"test_list_agent_office_phone_13_14","fullName":"tests.test_checklist.TestPromotionChecklist#test_list_agent_office_phone_13_14","historyId":"afa263ac37a690111948a7651470f0ce","time":{"start":1736464869066,"stop":1736464909518,"duration":40452},"description":"list_agent_office_phone are mapped with [with source='14']\n    `   FirstValueProvider:(\"agent_office_phone\",\"office_phone\")\" ","descriptionHtml":"<p>list_agent_office_phone are mapped with [with source='14']<br />\n`   FirstValueProvider:(&quot;agent_office_phone&quot;,&quot;office_phone&quot;)&quot;</p>\n","status":"failed","statusMessage":"AssertionError: 'list[55 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'list[55 chars]dd]\\nValueProvider(json_path=agent_office_phon[34 chars]add]'\n  list_agent_office.properties.list_agent_office_phone\n  +\n  [add]\n- FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\n? -----                        --                  -----------------\n+ ValueProvider(json_path=agent_office_phone,skip_values=[])\n  [add]\n  [add]\n  [add]","statusTrace":"tests/test_checklist.py:240: in test_list_agent_office_phone\n    raise e  # Re-raise to ensure the test fails\ntests/test_checklist.py:232: in test_list_agent_office_phone\n    self.assertEqual(OFFICE_PHONE, actual)\nE   AssertionError: 'list[55 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'list[55 chars]dd]\\nValueProvider(json_path=agent_office_phon[34 chars]add]'\nE     list_agent_office.properties.list_agent_office_phone\nE     +\nE     [add]\nE   - FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\nE   ? -----                        --                  -----------------\nE   + ValueProvider(json_path=agent_office_phone,skip_values=[])\nE     [add]\nE     [add]\nE     [add]","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736455759376,"stop":1736455759376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"list_agent_office_phone are mapped with [with source='14']\n    `   FirstValueProvider:(\"agent_office_phone\",\"office_phone\")\" ","status":"failed","statusMessage":"AssertionError: 'list[55 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'list[55 chars]dd]\\nValueProvider(json_path=agent_office_phon[34 chars]add]'\n  list_agent_office.properties.list_agent_office_phone\n  +\n  [add]\n- FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\n? -----                        --                  -----------------\n+ ValueProvider(json_path=agent_office_phone,skip_values=[])\n  [add]\n  [add]\n  [add]","statusTrace":"tests/test_checklist.py:240: in test_list_agent_office_phone\n    raise e  # Re-raise to ensure the test fails\ntests/test_checklist.py:232: in test_list_agent_office_phone\n    self.assertEqual(OFFICE_PHONE, actual)\nE   AssertionError: 'list[55 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'list[55 chars]dd]\\nValueProvider(json_path=agent_office_phon[34 chars]add]'\nE     list_agent_office.properties.list_agent_office_phone\nE     +\nE     [add]\nE   - FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\nE   ? -----                        --                  -----------------\nE   + ValueProvider(json_path=agent_office_phone,skip_values=[])\nE     [add]\nE     [add]\nE     [add]","steps":[{"name":"\nMetadata = PROPERTY - CI_4 Failed ❌\n","time":{"start":1736464880439,"stop":1736464880439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\nMetadata = PROPERTY - RN_5 Failed ❌\n","time":{"start":1736464887614,"stop":1736464887614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\nMetadata = PROPERTY - MF_2 Failed ❌\n","time":{"start":1736464895250,"stop":1736464895250,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\nMetadata = PROPERTY - RS_1 Failed ❌\n","time":{"start":1736464902667,"stop":1736464902667,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\nMetadata = PROPERTY - VL_3 Failed ❌\n","time":{"start":1736464909431,"stop":1736464909431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":5,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736471629916,"stop":1736471629916,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az975-182"},{"name":"thread","value":"2780-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"3ae0d20df57afe74.json","parameterValues":[]}