{"uid":"42b389cfc55533ca","name":"test_list_address_nullifier_const_3_102","fullName":"tests.test_checklist.TestPromotionChecklist#test_list_address_nullifier_const_3_102","historyId":"7ac1307941bac07f3cb9b322b8c36b8b","time":{"start":1736027235196,"stop":1736027248301,"duration":13105},"description":"No elements of list_address are nullified or set constant (except country) [with source='102']","descriptionHtml":"<p>No elements of list_address are nullified or set constant (except country) [with source='102']</p>\n","status":"failed","statusMessage":"AssertionError: False is not true : {'list_address-properties-address': True, 'list_address-properties-state_prov': True, 'list_address-properties-postal_code': False, 'list_address-properties-street_name': False, 'list_address-properties-street_number': False, 'list_address-properties-unit_number': True, 'list_address-properties-street_suffix': True, 'list_address-properties-street_post_dir': True, 'list_address-properties-street_direction': True}","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_nullifier_const_3_102>\nsource = '102'\n\n    @allure.testcase('No elements of list_address are nullified or set constant (except country)')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_list_address_nullifier_const(self, source):\n        '''No elements of list_address are nullified or set constant (except country)'''\n        print(\"No elements of list_address are nullified or set constant (except country)\", flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        screenshot_path = os.path.join(os.getcwd(), 'artifacts/screenshots', f'{self.id()}.png')\n        os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)\n        self.driver.save_screenshot(screenshot_path)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            SLPMain(self.driver).metadata_main_select(metadata)\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            actual = []\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).impl_wait_metadata()\n                    for address_field in LIST_FIELDS:\n                        list_fields_txt = address_field.replace('-', '.')\n                        field = ListComponent(self.driver).get_txt_get_field(address_field)\n                        field_actual = False\n                        expected_field = ListComponent(self.driver).get_expected_field(list_fields_txt)\n                        if (\n                                'nullifier' not in field.lower() and 'skip_values=[]' in field.lower() and 'setconstant' not in field.lower()) or field == expected_field:\n                            field_actual = True\n                            actual.append(field_actual)\n                        else:\n                            actual.append(field_actual)\n                            print(f'{address_field} = ', field_actual)\n                    result = dict(zip(LIST_FIELDS, actual))\n                    try:\n>                       self.assertTrue(all(actual), result)\nE                       AssertionError: False is not true : {'list_address-properties-address': True, 'list_address-properties-state_prov': True, 'list_address-properties-postal_code': False, 'list_address-properties-street_name': False, 'list_address-properties-street_number': False, 'list_address-properties-unit_number': True, 'list_address-properties-street_suffix': True, 'list_address-properties-street_post_dir': True, 'list_address-properties-street_direction': True}\n\ntests/test_checklist.py:84: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_nullifier_const_3_102>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:88: in test_list_address_nullifier_const\n    self.assertTrue(all(actual), result)\nE   AssertionError: False is not true : {'list_address-properties-address': True, 'list_address-properties-state_prov': True, 'list_address-properties-postal_code': False, 'list_address-properties-street_name': False, 'list_address-properties-street_number': False, 'list_address-properties-unit_number': True, 'list_address-properties-street_suffix': True, 'list_address-properties-street_post_dir': True, 'list_address-properties-street_direction': True}","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736025466707,"stop":1736025466707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"No elements of list_address are nullified or set constant (except country) [with source='102']","status":"failed","statusMessage":"AssertionError: False is not true : {'list_address-properties-address': True, 'list_address-properties-state_prov': True, 'list_address-properties-postal_code': False, 'list_address-properties-street_name': False, 'list_address-properties-street_number': False, 'list_address-properties-unit_number': True, 'list_address-properties-street_suffix': True, 'list_address-properties-street_post_dir': True, 'list_address-properties-street_direction': True}","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_nullifier_const_3_102>\nsource = '102'\n\n    @allure.testcase('No elements of list_address are nullified or set constant (except country)')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_list_address_nullifier_const(self, source):\n        '''No elements of list_address are nullified or set constant (except country)'''\n        print(\"No elements of list_address are nullified or set constant (except country)\", flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        screenshot_path = os.path.join(os.getcwd(), 'artifacts/screenshots', f'{self.id()}.png')\n        os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)\n        self.driver.save_screenshot(screenshot_path)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            SLPMain(self.driver).metadata_main_select(metadata)\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            actual = []\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).impl_wait_metadata()\n                    for address_field in LIST_FIELDS:\n                        list_fields_txt = address_field.replace('-', '.')\n                        field = ListComponent(self.driver).get_txt_get_field(address_field)\n                        field_actual = False\n                        expected_field = ListComponent(self.driver).get_expected_field(list_fields_txt)\n                        if (\n                                'nullifier' not in field.lower() and 'skip_values=[]' in field.lower() and 'setconstant' not in field.lower()) or field == expected_field:\n                            field_actual = True\n                            actual.append(field_actual)\n                        else:\n                            actual.append(field_actual)\n                            print(f'{address_field} = ', field_actual)\n                    result = dict(zip(LIST_FIELDS, actual))\n                    try:\n>                       self.assertTrue(all(actual), result)\nE                       AssertionError: False is not true : {'list_address-properties-address': True, 'list_address-properties-state_prov': True, 'list_address-properties-postal_code': False, 'list_address-properties-street_name': False, 'list_address-properties-street_number': False, 'list_address-properties-unit_number': True, 'list_address-properties-street_suffix': True, 'list_address-properties-street_post_dir': True, 'list_address-properties-street_direction': True}\n\ntests/test_checklist.py:84: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_nullifier_const_3_102>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:88: in test_list_address_nullifier_const\n    self.assertTrue(all(actual), result)\nE   AssertionError: False is not true : {'list_address-properties-address': True, 'list_address-properties-state_prov': True, 'list_address-properties-postal_code': False, 'list_address-properties-street_name': False, 'list_address-properties-street_number': False, 'list_address-properties-unit_number': True, 'list_address-properties-street_suffix': True, 'list_address-properties-street_post_dir': True, 'list_address-properties-street_direction': True}","steps":[],"attachments":[{"uid":"3ef5ce665ba291dc","name":"stdout","source":"3ef5ce665ba291dc.txt","type":"text/plain","size":381}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736030473551,"stop":1736030473551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az802-93"},{"name":"thread","value":"2777-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"42b389cfc55533ca.json","parameterValues":[]}