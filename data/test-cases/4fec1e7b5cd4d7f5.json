{"uid":"4fec1e7b5cd4d7f5","name":"test_co_list_agent_preferred_phone_6_105","fullName":"tests.test_checklist.TestPromotionChecklist#test_co_list_agent_preferred_phone_6_105","historyId":"42505b9ddaca6c3ccad59d0e729b4851","time":{"start":1736025911127,"stop":1736025924186,"duration":13059},"description":"co_list_agent_preferred_phone are mapped with [with source='105']\n        FirstValueProvider:(\"agent_mobile_phone\",\"agent_home_phone\"","descriptionHtml":"<p>co_list_agent_preferred_phone are mapped with [with source='105']<br />\nFirstValueProvider:(&quot;agent_mobile_phone&quot;,&quot;agent_home_phone&quot;</p>\n","status":"failed","statusMessage":"AssertionError: 'co_l[116 chars]ne\",\"agent_home_phone\"],skip_values=[])\\n[add]\\n[add]\\n[add]' != 'co_l[116 chars]ne\",\"office_phone\",\"agent_home_phone\"],skip_va[25 chars]add]'\n  co_list_agent_office.properties.co_list_agent_preferred_phone\n  +\n  [add]\n- FirstValueProvider(json_path=[\"agent_mobile_phone\",\"agent_home_phone\"],skip_values=[])\n+ FirstValueProvider(json_path=[\"agent_mobile_phone\",\"office_phone\",\"agent_home_phone\"],skip_values=[])\n?                                                     +++++++++++++++\n  [add]\n  [add]\n  [add]","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_co_list_agent_preferred_phone_6_105>\nsource = '105'\n\n    @allure.testcase('4')\n    @parameterized.expand(sources)\n    def test_co_list_agent_preferred_phone(self, source):\n        '''co_list_agent_preferred_phone are mapped with\n        FirstValueProvider:(\"agent_mobile_phone\",\"agent_home_phone\"'''\n        print(\n            '''co_list_agent_preferred_phone are mapped with FirstValueProvider:(\"agent_mobile_phone\",\"agent_home_phone)\"''',\n            flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_co_list_agent_preferred_phone()\n                    actual = ListComponent(self.driver).get_txt_co_list_agent_preferred_phone()\n                    try:\n>                       self.assertEqual(CO_PREFERRED_PHONE, actual)\nE                       AssertionError: 'co_l[116 chars]ne\",\"agent_home_phone\"],skip_values=[])\\n[add]\\n[add]\\n[add]' != 'co_l[116 chars]ne\",\"office_phone\",\"agent_home_phone\"],skip_va[25 chars]add]'\nE                         co_list_agent_office.properties.co_list_agent_preferred_phone\nE                         +\nE                         [add]\nE                       - FirstValueProvider(json_path=[\"agent_mobile_phone\",\"agent_home_phone\"],skip_values=[])\nE                       + FirstValueProvider(json_path=[\"agent_mobile_phone\",\"office_phone\",\"agent_home_phone\"],skip_values=[])\nE                       ?                                                     +++++++++++++++\nE                         [add]\nE                         [add]\nE                         [add]\n\ntests/test_checklist.py:176: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_co_list_agent_preferred_phone_6_105>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:180: in test_co_list_agent_preferred_phone\n    self.assertEqual(CO_PREFERRED_PHONE, actual)\nE   AssertionError: 'co_l[116 chars]ne\",\"agent_home_phone\"],skip_values=[])\\n[add]\\n[add]\\n[add]' != 'co_l[116 chars]ne\",\"office_phone\",\"agent_home_phone\"],skip_va[25 chars]add]'\nE     co_list_agent_office.properties.co_list_agent_preferred_phone\nE     +\nE     [add]\nE   - FirstValueProvider(json_path=[\"agent_mobile_phone\",\"agent_home_phone\"],skip_values=[])\nE   + FirstValueProvider(json_path=[\"agent_mobile_phone\",\"office_phone\",\"agent_home_phone\"],skip_values=[])\nE   ?                                                     +++++++++++++++\nE     [add]\nE     [add]\nE     [add]","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736025466707,"stop":1736025466707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"co_list_agent_preferred_phone are mapped with [with source='105']\n        FirstValueProvider:(\"agent_mobile_phone\",\"agent_home_phone\"","status":"failed","statusMessage":"AssertionError: 'co_l[116 chars]ne\",\"agent_home_phone\"],skip_values=[])\\n[add]\\n[add]\\n[add]' != 'co_l[116 chars]ne\",\"office_phone\",\"agent_home_phone\"],skip_va[25 chars]add]'\n  co_list_agent_office.properties.co_list_agent_preferred_phone\n  +\n  [add]\n- FirstValueProvider(json_path=[\"agent_mobile_phone\",\"agent_home_phone\"],skip_values=[])\n+ FirstValueProvider(json_path=[\"agent_mobile_phone\",\"office_phone\",\"agent_home_phone\"],skip_values=[])\n?                                                     +++++++++++++++\n  [add]\n  [add]\n  [add]","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_co_list_agent_preferred_phone_6_105>\nsource = '105'\n\n    @allure.testcase('4')\n    @parameterized.expand(sources)\n    def test_co_list_agent_preferred_phone(self, source):\n        '''co_list_agent_preferred_phone are mapped with\n        FirstValueProvider:(\"agent_mobile_phone\",\"agent_home_phone\"'''\n        print(\n            '''co_list_agent_preferred_phone are mapped with FirstValueProvider:(\"agent_mobile_phone\",\"agent_home_phone)\"''',\n            flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_co_list_agent_preferred_phone()\n                    actual = ListComponent(self.driver).get_txt_co_list_agent_preferred_phone()\n                    try:\n>                       self.assertEqual(CO_PREFERRED_PHONE, actual)\nE                       AssertionError: 'co_l[116 chars]ne\",\"agent_home_phone\"],skip_values=[])\\n[add]\\n[add]\\n[add]' != 'co_l[116 chars]ne\",\"office_phone\",\"agent_home_phone\"],skip_va[25 chars]add]'\nE                         co_list_agent_office.properties.co_list_agent_preferred_phone\nE                         +\nE                         [add]\nE                       - FirstValueProvider(json_path=[\"agent_mobile_phone\",\"agent_home_phone\"],skip_values=[])\nE                       + FirstValueProvider(json_path=[\"agent_mobile_phone\",\"office_phone\",\"agent_home_phone\"],skip_values=[])\nE                       ?                                                     +++++++++++++++\nE                         [add]\nE                         [add]\nE                         [add]\n\ntests/test_checklist.py:176: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_co_list_agent_preferred_phone_6_105>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:180: in test_co_list_agent_preferred_phone\n    self.assertEqual(CO_PREFERRED_PHONE, actual)\nE   AssertionError: 'co_l[116 chars]ne\",\"agent_home_phone\"],skip_values=[])\\n[add]\\n[add]\\n[add]' != 'co_l[116 chars]ne\",\"office_phone\",\"agent_home_phone\"],skip_va[25 chars]add]'\nE     co_list_agent_office.properties.co_list_agent_preferred_phone\nE     +\nE     [add]\nE   - FirstValueProvider(json_path=[\"agent_mobile_phone\",\"agent_home_phone\"],skip_values=[])\nE   + FirstValueProvider(json_path=[\"agent_mobile_phone\",\"office_phone\",\"agent_home_phone\"],skip_values=[])\nE   ?                                                     +++++++++++++++\nE     [add]\nE     [add]\nE     [add]","steps":[],"attachments":[{"uid":"c90b6dddef90f09","name":"stdout","source":"c90b6dddef90f09.txt","type":"text/plain","size":347}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736030473551,"stop":1736030473551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az802-93"},{"name":"thread","value":"2777-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4fec1e7b5cd4d7f5.json","parameterValues":[]}