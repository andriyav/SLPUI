{"uid":"a17cd64c405aed5f","name":"test_price_history","fullName":"tests.test_checklist.TestPromotionChecklist#test_price_history","historyId":"322f62dde71472165c01dedf72099291","time":{"start":1739295371829,"stop":1739295372682,"duration":853},"description":"A decorator for applying a mark on test functions and classes.\n\n``MarkDecorators`` are created with ``pytest.mark``::\n\n    mark1 = pytest.mark.NAME  # Simple MarkDecorator\n    mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator\n\nand can then be applied as decorators to test functions::\n\n    @mark2\n    def test_function():\n        pass\n\nWhen a ``MarkDecorator`` is called, it does the following:\n\n1. If called with a single class as its only positional argument and no\n   additional keyword arguments, it attaches the mark to the class so it\n   gets applied automatically to all test cases found in that class.\n\n2. If called with a single function as its only positional argument and\n   no additional keyword arguments, it attaches the mark to the function,\n   containing all the arguments already stored internally in the\n   ``MarkDecorator``.\n\n3. When called in any other case, it returns a new ``MarkDecorator``\n   instance with the original ``MarkDecorator``'s content updated with\n   the arguments passed to this call.\n\nNote: The rules above prevent a ``MarkDecorator`` from storing only a\nsingle function or class reference as its positional argument with no\nadditional keyword or positional arguments. You can work around this by\nusing `with_args()`.\n","descriptionHtml":"<p>A decorator for applying a mark on test functions and classes.</p>\n<p><code>MarkDecorators</code> are created with <code>pytest.mark</code>::</p>\n<pre><code>mark1 = pytest.mark.NAME  # Simple MarkDecorator\nmark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator\n</code></pre>\n<p>and can then be applied as decorators to test functions::</p>\n<pre><code>@mark2\ndef test_function():\n    pass\n</code></pre>\n<p>When a <code>MarkDecorator</code> is called, it does the following:</p>\n<ol>\n<li>\n<p>If called with a single class as its only positional argument and no<br />\nadditional keyword arguments, it attaches the mark to the class so it<br />\ngets applied automatically to all test cases found in that class.</p>\n</li>\n<li>\n<p>If called with a single function as its only positional argument and<br />\nno additional keyword arguments, it attaches the mark to the function,<br />\ncontaining all the arguments already stored internally in the<br />\n<code>MarkDecorator</code>.</p>\n</li>\n<li>\n<p>When called in any other case, it returns a new <code>MarkDecorator</code><br />\ninstance with the original <code>MarkDecorator</code>'s content updated with<br />\nthe arguments passed to this call.</p>\n</li>\n</ol>\n<p>Note: The rules above prevent a <code>MarkDecorator</code> from storing only a<br />\nsingle function or class reference as its positional argument with no<br />\nadditional keyword or positional arguments. You can work around this by<br />\nusing <code>with_args()</code>.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=133.0.6943.53)\nStacktrace:\n#0 0x55ea9238609a <unknown>\n#1 0x55ea91e4d8b0 <unknown>\n#2 0x55ea91e33e51 <unknown>\n#3 0x55ea91e326fd <unknown>\n#4 0x55ea91e32eaf <unknown>\n#5 0x55ea91e61757 <unknown>\n#6 0x55ea91e566b1 <unknown>\n#7 0x55ea91e565a8 <unknown>\n#8 0x55ea91e2477a <unknown>\n#9 0x55ea91e22be4 <unknown>\n#10 0x55ea91eff5cf <unknown>\n#11 0x55ea91ec4982 <unknown>\n#12 0x55ea91eeab8b <unknown>\n#13 0x55ea91ec4753 <unknown>\n#14 0x55ea91e9038e <unknown>\n#15 0x55ea91e91b51 <unknown>\n#16 0x55ea9234f76b <unknown>\n#17 0x55ea923536f2 <unknown>\n#18 0x55ea9233b8fc <unknown>\n#19 0x55ea923542e4 <unknown>\n#20 0x55ea9231f9cf <unknown>\n#21 0x55ea92374cd8 <unknown>\n#22 0x55ea92374eb6 <unknown>\n#23 0x55ea92384f16 <unknown>\n#24 0x7fc74829caa4 <unknown>\n#25 0x7fc748329c3c <unknown>","statusTrace":"tests/test_runner.py:21: in setUp\n    self._init_driver()\ntests/test_runner.py:37: in _init_driver\n    self.driver.maximize_window()\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:536: in maximize_window\n    self.execute(command, None)\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb3817234d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...\\\\n#23 0x55ea92384f16 \\\\u003Cunknown>\\\\n#24 0x7fc74829caa4 \\\\u003Cunknown>\\\\n#25 0x7fc748329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=133.0.6943.53)\nE       Stacktrace:\nE       #0 0x55ea9238609a <unknown>\nE       #1 0x55ea91e4d8b0 <unknown>\nE       #2 0x55ea91e33e51 <unknown>\nE       #3 0x55ea91e326fd <unknown>\nE       #4 0x55ea91e32eaf <unknown>\nE       #5 0x55ea91e61757 <unknown>\nE       #6 0x55ea91e566b1 <unknown>\nE       #7 0x55ea91e565a8 <unknown>\nE       #8 0x55ea91e2477a <unknown>\nE       #9 0x55ea91e22be4 <unknown>\nE       #10 0x55ea91eff5cf <unknown>\nE       #11 0x55ea91ec4982 <unknown>\nE       #12 0x55ea91eeab8b <unknown>\nE       #13 0x55ea91ec4753 <unknown>\nE       #14 0x55ea91e9038e <unknown>\nE       #15 0x55ea91e91b51 <unknown>\nE       #16 0x55ea9234f76b <unknown>\nE       #17 0x55ea923536f2 <unknown>\nE       #18 0x55ea9233b8fc <unknown>\nE       #19 0x55ea923542e4 <unknown>\nE       #20 0x55ea9231f9cf <unknown>\nE       #21 0x55ea92374cd8 <unknown>\nE       #22 0x55ea92374eb6 <unknown>\nE       #23 0x55ea92384f16 <unknown>\nE       #24 0x7fc74829caa4 <unknown>\nE       #25 0x7fc748329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1739295298446,"stop":1739295298446,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1739295393619,"stop":1739295393619,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az1384-314"},{"name":"thread","value":"2507-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"a17cd64c405aed5f.json","parameterValues":[]}