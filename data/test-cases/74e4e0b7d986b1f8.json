{"uid":"74e4e0b7d986b1f8","name":"test_price_history_3_9","fullName":"tests.test_checklist.TestPromotionChecklist#test_price_history_3_9","historyId":"108a4a1967224760c6a79b72c407afa9","time":{"start":1736033414128,"stop":1736033426651,"duration":12523},"description":"Price_history must use PriceHistoryEnhancer with ListPrice input [with source='9']","descriptionHtml":"<p>Price_history must use PriceHistoryEnhancer with ListPrice input [with source='9']</p>\n","status":"failed","statusMessage":"AssertionError: False is not true","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_price_history_3_9>\nsource = '9'\n\n    @allure.testcase('13')\n    @parameterized.expand(sources)\n    def test_price_history(self, source):\n        ''' Price_history must use PriceHistoryEnhancer with ListPrice input'''\n        print('''Price_history must use PriceHistoryEnhancer with ListPrice input''', flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            actual = []\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    field_actual = False\n                    price_history = ListComponent(self.driver).get_txt_get_field('price_history')\n                    if 'json_path=' in price_history and 'PriceHistoryEnhancer' in price_history:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history = ', field_actual)\n    \n                    price_history_items = ListComponent(self.driver).get_txt_get_field('price_history-items')\n                    field_actual = False\n                    if 'ValueProvider(json_path=[],skip_values=[])' in price_history_items:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history-items = ', field_actual)\n    \n                    price_history_in_use = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-in_use')\n                    field_actual = False\n                    if 'ValueProvider(json_path=in_use,skip_values=[])' in price_history_in_use:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history-items-properties-in_use = ', field_actual)\n    \n                    price_history_percent_change = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-percent_change')\n                    field_actual = False\n                    if 'ValueProvider(json_path=percent_change,skip_values=[])' in price_history_percent_change:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.percent_change = ', field_actual)\n    \n                    price_history_update_at = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-price_updated_at')\n                    field_actual = False\n                    if 'ValueProvider(json_path=price_updated_at,skip_values=[])' in price_history_update_at:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.price_updated_at = ', field_actual)\n    \n                    price_history_current_list_price = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-current_list_price')\n                    field_actual = False\n                    if 'ValueProvider(json_path=current_list_price,skip_values=[])' in price_history_current_list_price:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.current_list_price = ', field_actual)\n    \n                    price_history_previous_list_price = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-previous_list_price')\n                    field_actual = False\n                    if 'ValueProvider(json_path=previous_list_price,skip_values=[])' in price_history_previous_list_price:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.previous_list_price = ', field_actual)\n                    try:\n>                       self.assertTrue(all(actual))\nE                       AssertionError: False is not true\n\ntests/test_checklist.py:498: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_price_history_3_9>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:502: in test_price_history\n    self.assertTrue(all(actual))\nE   AssertionError: False is not true","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736030911162,"stop":1736030911162,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Price_history must use PriceHistoryEnhancer with ListPrice input [with source='9']","status":"failed","statusMessage":"AssertionError: False is not true","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_price_history_3_9>\nsource = '9'\n\n    @allure.testcase('13')\n    @parameterized.expand(sources)\n    def test_price_history(self, source):\n        ''' Price_history must use PriceHistoryEnhancer with ListPrice input'''\n        print('''Price_history must use PriceHistoryEnhancer with ListPrice input''', flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            actual = []\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    field_actual = False\n                    price_history = ListComponent(self.driver).get_txt_get_field('price_history')\n                    if 'json_path=' in price_history and 'PriceHistoryEnhancer' in price_history:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history = ', field_actual)\n    \n                    price_history_items = ListComponent(self.driver).get_txt_get_field('price_history-items')\n                    field_actual = False\n                    if 'ValueProvider(json_path=[],skip_values=[])' in price_history_items:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history-items = ', field_actual)\n    \n                    price_history_in_use = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-in_use')\n                    field_actual = False\n                    if 'ValueProvider(json_path=in_use,skip_values=[])' in price_history_in_use:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history-items-properties-in_use = ', field_actual)\n    \n                    price_history_percent_change = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-percent_change')\n                    field_actual = False\n                    if 'ValueProvider(json_path=percent_change,skip_values=[])' in price_history_percent_change:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.percent_change = ', field_actual)\n    \n                    price_history_update_at = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-price_updated_at')\n                    field_actual = False\n                    if 'ValueProvider(json_path=price_updated_at,skip_values=[])' in price_history_update_at:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.price_updated_at = ', field_actual)\n    \n                    price_history_current_list_price = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-current_list_price')\n                    field_actual = False\n                    if 'ValueProvider(json_path=current_list_price,skip_values=[])' in price_history_current_list_price:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.current_list_price = ', field_actual)\n    \n                    price_history_previous_list_price = ListComponent(self.driver).get_txt_get_field(\n                        'price_history-items-properties-previous_list_price')\n                    field_actual = False\n                    if 'ValueProvider(json_path=previous_list_price,skip_values=[])' in price_history_previous_list_price:\n                        field_actual = True\n                        actual.append(field_actual)\n                    else:\n                        actual.append(field_actual)\n                        print('price_history.items.properties.previous_list_price = ', field_actual)\n                    try:\n>                       self.assertTrue(all(actual))\nE                       AssertionError: False is not true\n\ntests/test_checklist.py:498: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_price_history_3_9>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:502: in test_price_history\n    self.assertTrue(all(actual))\nE   AssertionError: False is not true","steps":[],"attachments":[{"uid":"c44bf067735f9d13","name":"stdout","source":"c44bf067735f9d13.txt","type":"text/plain","size":465}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736033792678,"stop":1736033792679,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az570-511"},{"name":"thread","value":"2814-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"74e4e0b7d986b1f8.json","parameterValues":[]}