{"uid":"3ede172af8a72429","name":"test_list_address_properties_country_0_10","fullName":"tests.test_checklist.TestPromotionChecklist#test_list_address_properties_country_0_10","historyId":"607d04d58c6fe25f73ef91f0df4d23c0","time":{"start":1736027314777,"stop":1736027327430,"duration":12653},"description":"list_address.country is SetConstant to country code (US or CA) [with source='10']","descriptionHtml":"<p>list_address.country is SetConstant to country code (US or CA) [with source='10']</p>\n","status":"failed","statusMessage":"AssertionError: False is not true","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_properties_country_0_10>\nsource = '10'\n\n    @allure.testcase('list_address.country is SetConstant to country code (US or CA)')\n    @parameterized.expand(sources)\n    def test_list_address_properties_country(self, source):\n        '''list_address.country is SetConstant to country code (US or CA)'''\n        print(\"list_address.country is SetConstant to country code (US or CA)\", flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        self.driver.implicitly_wait(20)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_address_country()\n                    country_code = ListComponent(self.driver).get_txt_list_address_country()\n                    actual = False\n                    if country_code == COUNTRY_US or country_code == COUNTRY_CA:\n                        actual = True\n                    try:\n>                       self.assertTrue(actual)\nE                       AssertionError: False is not true\n\ntests/test_checklist.py:115: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_properties_country_0_10>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:119: in test_list_address_properties_country\n    self.assertTrue(actual)\nE   AssertionError: False is not true","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736025466707,"stop":1736025466707,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"list_address.country is SetConstant to country code (US or CA) [with source='10']","status":"failed","statusMessage":"AssertionError: False is not true","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_properties_country_0_10>\nsource = '10'\n\n    @allure.testcase('list_address.country is SetConstant to country code (US or CA)')\n    @parameterized.expand(sources)\n    def test_list_address_properties_country(self, source):\n        '''list_address.country is SetConstant to country code (US or CA)'''\n        print(\"list_address.country is SetConstant to country code (US or CA)\", flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        self.driver.implicitly_wait(20)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_address_country()\n                    country_code = ListComponent(self.driver).get_txt_list_address_country()\n                    actual = False\n                    if country_code == COUNTRY_US or country_code == COUNTRY_CA:\n                        actual = True\n                    try:\n>                       self.assertTrue(actual)\nE                       AssertionError: False is not true\n\ntests/test_checklist.py:115: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\na = (<tests.test_checklist.TestPromotionChecklist testMethod=test_list_address_properties_country_0_10>,)\nkw = {}\n\n    @wraps(func)\n    def standalone_func(*a, **kw):\n>       return func(*(a + p.args), **p.kwargs, **kw)\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/parameterized/parameterized.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_checklist.py:119: in test_list_address_properties_country\n    self.assertTrue(actual)\nE   AssertionError: False is not true","steps":[],"attachments":[{"uid":"d8f66e6cda9ec348","name":"stdout","source":"d8f66e6cda9ec348.txt","type":"text/plain","size":226}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736030473551,"stop":1736030473551,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az802-93"},{"name":"thread","value":"2777-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3ede172af8a72429.json","parameterValues":[]}