{"uid":"e2d37c9a81e9a348","name":"test_co_list_agent_office_phone_15_439","fullName":"tests.test_checklist.TestPromotionChecklist#test_co_list_agent_office_phone_15_439","historyId":"b12691a6b28b4ca75bc96acf1e145de5","time":{"start":1736409227653,"stop":1736409291791,"duration":64138},"description":"co_list_agent_office_phone are mapped with [with source='439']\n            FirstValueProvider:(\"agent_office_phone\",\"office_phone\")\" ","descriptionHtml":"<p>co_list_agent_office_phone are mapped with [with source='439']<br />\nFirstValueProvider:(&quot;agent_office_phone&quot;,&quot;office_phone&quot;)&quot;</p>\n","status":"failed","statusMessage":"AssertionError: 'co_l[61 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'co_l[61 chars]dd]\\nValueProvider(json_path=CoListOfficePhone[33 chars]add]'\n  co_list_agent_office.properties.co_list_agent_office_phone\n  +\n  [add]\n- FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\n+ ValueProvider(json_path=CoListOfficePhone,skip_values=[])\n  [add]\n  [add]\n  [add]","statusTrace":"tests/test_checklist.py:169: in test_co_list_agent_office_phone\n    raise e  # Re-raise to ensure the test fails\ntests/test_checklist.py:161: in test_co_list_agent_office_phone\n    self.assertEqual(CO_OFFICE_PHONE, actual)\nE   AssertionError: 'co_l[61 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'co_l[61 chars]dd]\\nValueProvider(json_path=CoListOfficePhone[33 chars]add]'\nE     co_list_agent_office.properties.co_list_agent_office_phone\nE     +\nE     [add]\nE   - FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\nE   + ValueProvider(json_path=CoListOfficePhone,skip_values=[])\nE     [add]\nE     [add]\nE     [add]","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736408489618,"stop":1736408489618,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"co_list_agent_office_phone are mapped with [with source='439']\n            FirstValueProvider:(\"agent_office_phone\",\"office_phone\")\" ","status":"failed","statusMessage":"AssertionError: 'co_l[61 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'co_l[61 chars]dd]\\nValueProvider(json_path=CoListOfficePhone[33 chars]add]'\n  co_list_agent_office.properties.co_list_agent_office_phone\n  +\n  [add]\n- FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\n+ ValueProvider(json_path=CoListOfficePhone,skip_values=[])\n  [add]\n  [add]\n  [add]","statusTrace":"tests/test_checklist.py:169: in test_co_list_agent_office_phone\n    raise e  # Re-raise to ensure the test fails\ntests/test_checklist.py:161: in test_co_list_agent_office_phone\n    self.assertEqual(CO_OFFICE_PHONE, actual)\nE   AssertionError: 'co_l[61 chars]dd]\\nFirstValueProvider(json_path=[\"agent_offi[58 chars]add]' != 'co_l[61 chars]dd]\\nValueProvider(json_path=CoListOfficePhone[33 chars]add]'\nE     co_list_agent_office.properties.co_list_agent_office_phone\nE     +\nE     [add]\nE   - FirstValueProvider(json_path=[\"agent_office_phone\",\"office_phone\"],skip_values=[])\nE   + ValueProvider(json_path=CoListOfficePhone,skip_values=[])\nE     [add]\nE     [add]\nE     [add]","steps":[{"name":"\nMetadata = PROPERTY Failed ‚ùå\n","time":{"start":1736409240752,"stop":1736409240752,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Looks like the class PROPERTY - A is not mapped","time":{"start":1736409250997,"stop":1736409250997,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Looks like the class PROPERTY - B is not mapped","time":{"start":1736409261198,"stop":1736409261198,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Looks like the class PROPERTY - C is not mapped","time":{"start":1736409271395,"stop":1736409271395,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Looks like the class PROPERTY - D is not mapped","time":{"start":1736409281562,"stop":1736409281562,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Looks like the class PROPERTY - E is not mapped","time":{"start":1736409291730,"stop":1736409291730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":6,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736422496557,"stop":1736422496557,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az1109-725"},{"name":"thread","value":"2761-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"e2d37c9a81e9a348.json","parameterValues":[]}