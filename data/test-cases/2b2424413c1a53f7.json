{"uid":"2b2424413c1a53f7","name":"test_mls_id_sa_id_04_666","fullName":"tests.test_checklist.TestPromotionChecklist#test_mls_id_sa_id_04_666","historyId":"f0f992a1ddd0d9e83eb789e569d85a04","time":{"start":1736255390621,"stop":1736255426785,"duration":36164},"description":"Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='666']","descriptionHtml":"<p>Validate mls_source_id and sa_source_id are correct from here (NOT kw_id) [with source='666']</p>\n","status":"broken","statusMessage":"TypeError: 'NoneType' object is not subscriptable","statusTrace":"self = <tests.test_checklist.TestPromotionChecklist testMethod=test_mls_id_sa_id_04_666>\nsource = '666'\n\n    @allure.testcase('7')\n    @parameterized.expand(sources)\n    @pytest.mark.filterwarnings(\"ignore::DeprecationWarning\")\n    def test_mls_id_sa_id(self, source):\n        '''Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)'''\n        print(\"\\n----------------------------------------------------------------------\\n\", flush=True)\n        print('''Validate mls_source_id and sa_source_id are correct from here (NOT kw_id)''', flush=True)\n        print(f\"kw_id = {source}\", flush=True)\n        WebDriverWait(self.driver, 30).until(EC.element_to_be_clickable(SOURCE_ID))\n        SLPMain(self.driver).source_select(source)\n        metadata_numbers = ListComponent(self.driver).get_metadata_number()\n        for metadata in range(1, metadata_numbers):\n            class_txt = ListComponent(self.driver).get_metadata_text(metadata + 1)\n            with self.subTest(metadata=class_txt):\n                try:\n                    SLPMain(self.driver).metadata_main_select(metadata)\n                    SLPMain(self.driver).impl_wait_metadata()\n                    ListComponent(self.driver).get_list_sa_id()\n                    sa_id = ListComponent(self.driver).get_txt_ist_sa_id()\n                    mls_id = ListComponent(self.driver).get_txt_list_mls_id()\n                    actual = [mls_id, sa_id]\n                    target_list = mls_id_dict.get(source)\n>                   mls_id_target = f'mls_id\\n+\\n[add]\\n[add]\\n[add]\\n[add]\\nSetConstant(const={target_list[0]},const_type=str)'\nE                   TypeError: 'NoneType' object is not subscriptable\n\ntests/test_checklist.py:299: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist","time":{"start":1736240867625,"stop":1736240867625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"_unittest_setUpClass_fixture_TestPromotionChecklist::0","time":{"start":1736259712595,"stop":1736259712595,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.filterwarnings('ignore::DeprecationWarning')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_checklist"},{"name":"subSuite","value":"TestPromotionChecklist"},{"name":"host","value":"fv-az1245-946"},{"name":"thread","value":"2801-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_checklist"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.filterwarnings('ignore::DeprecationWarning')"]},"source":"2b2424413c1a53f7.json","parameterValues":[]}